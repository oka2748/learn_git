1-Create a function that takes two numbers as arguments and returns their sum.

the solution :

function addition(a, b) {
    if (typeof a !== "number" || typeof b !== "number") {
        return "Sorry but you didn't pass two numbers.";
    }
    return a + b;
}


2-Create a function that takes the age in years and returns the age in days.

the solution :

const calcAge = age => age * 365;


3-Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.

the solution :

function cubes(a) {
	return a ** 3
}


4-Create a function that takes an array containing only numbers and return the first element.

the solution :

function getFirstValue(arr) {
	return arr[0];
}


5-Write a function that converts hours into seconds.

the solution :

function howManySeconds(hours) {
	return hours * 3600;
}


6-Create a function which returns the number of true values there are in an array.

the solution :

function countTrue(arr) {
	 return arr.filter(x=>x==true).length
}


7-According to the lodash documentation, _.compact creates an array with all falsey values removed. The values false, null, 0, "", undefined, and NaN are falsey.

Your task is to build this helper function without using lodash. You will write a function that receives an array and removes all falsey values.


the solution :

let compact = a => a.filter(b => b);


8-According to the lodash documentation, _.compact creates an array with all falsey values removed. The values false, null, 0, "", undefined, and NaN are falsey.

Your task is to build this helper function without using lodash. You will write a function that receives an array and removes all falsey values.


the solution :

const compact = (arr) => {
	return arr.filter(Boolean)
}


9-Your task is to create a Circle constructor that creates a circle with a radius provided by an argument. The circles constructed must have two methods getArea() (PI*r^2) and getPerimeter() (2*PI*r) which give both respective areas and perimeter (circumference).

For help with this class, I have provided you with a Rectangle constructor which you can use as a base example.


the solution :

class Circle {
	constructor(r){
		this.r = r;
	}
	getArea = () => Math.PI * Math.pow(this.r,2);
	getPerimeter = () => 2 * Math.PI * this.r;
}


10-According to the lodash documentation, This method is like _.difference except it accepts a comparator which is invoked to compare elements of the array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).

This challenge requires you to write your own version of this function without using lodash so that you can better understand it works.

Using a car dealership example, if you have two parking lots and want to see which cars are different this function enables you to check each car in one lot against each car in the other using a comparison function which checks two values and returns true or false if they are equal or not. So you could check engine size and compare to see which cars are different according to the size of their engines. If lot one has a car that has a v6 engine and lot two doesn't have any cars that have v6 engines this would be the difference and the function would return the car with the v6 engine.

There is only one first array that is used to look for the difference but there can be many values arrays that are used to check against.


the solution :

const differenceWith = (arrVal, othVal, comp) => {
  return arrVal.filter(x => othVal.every(y => !comp(x, y)));
}


11-Create a function that takes an array of numbers and return "Boom!" if the digit 7 appears in the array. Otherwise, return "there is no 7 in the array".

the solution :

const sevenBoom = function(arr) {
	return (arr.join().includes('7') ? "Boom!" : "there is no 7 in the array");
}


12-Create a function that takes an array of strings and returns an array with only the strings that have numbers in them. If there are no strings containing numbers, return an empty array.

the solution :

function numInStr(arr) {
	return arr.filter(item => {
		for (char of item){
			if (char.charCodeAt(0)>47 && char.charCodeAt(0)<58){
				return item;
			}
		}
	})
}


13-This robot roams around a 2D grid. It starts at (0, 0) facing North. After each time it moves, the robot rotates 90 degrees clockwise. Given the amount the robot has moved each time, you have to calculate the robot's final position.

To illustrate, if the robot is given the movements 20, 30, 10, 40 then it will move:

20 steps North, now at (0, 20)
30 steps East, now at (30, 20)
10 steps South. now at (30, 10)
40 steps West, now at (-10, 10)
...and will end up at coordinates (-10, 10).


the solution :

function trackRobot(...steps) {
	var r = [0,0];
	for (var i in steps) {
		var d = i % 4;
	  if (d == 0) r[1] += steps[i];
	  if (d == 1) r[0] += steps[i];
	  if (d == 2) r[1] -= steps[i];
	  if (d == 3) r[0] -= steps[i];
	}
	return r;
}


14-Odd numbers like to hangout with odd numbers. Even numbers like to hangout with even numbers.

A spot is an insertion between two numbers in an array. Given an array of n integers in length, there are n-1 spots available.

For instance:


the solution :

function availableSpots(arr, num) {
    const evenness = num % 2;
    let count = 0;
    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] % 2 === evenness || arr[i + 1] % 2 === evenness) {
            count++;
        }
    }

    return count;
}
